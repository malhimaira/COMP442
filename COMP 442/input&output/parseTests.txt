function printArray() => void
{
// 3.2.1 2 3
// localvar intEx: integer function
// 3.1.1
  localvar intEx: integer;
  localvar i: integer;
  localvar floatEx: float;
  localvar idEx: id;
  localvar f1: LINEAR(2, 3.5);
  localvar f2: QUADRATIC(-2.0, 1.0, 0.0);
  localvar c1: QUADRATIC();
  floatEx = 0.1;
  i = 0;
  idEx = abc_1abc;
  intEx = i+2;
  // 3.1.9
  arr[j] = arr[j+1];
  while (i<intEx) {
    write(arr[i]);
      i = i+1;
  };
}

function bubbleSort(arr: integer[], size: integer) => void
{
  n = size;
  i = 0;
  j = 0;
  temp = 1+2-3*4/8;
  while (i <> n-1) {
  // 3.1.4 and 3.1.5
    while (j+2 <= n-i*1/3+i) {
      if (arr[j] > arr[j+1])
        then {
          // 3.1.9
          temp = arr[j][i];
          arr[j] = arr[j+1];
          arr[j+1] = temp;
        } else ;
        j = j+1;
      };
    i = i+1;
  };
}
// 3.1.3
class POLYNOMIAL {
  public function evaluate: (x: float) => float;
  public function evaluate: (q: integer) => float;
  private attribute a: float;
  private attribute b: float;
  private attribute b: float;
};
// 3.1.3
class QUADRATIC isa POLYNOMIAL {
  private attribute a: float;
  private attribute b: float;
  private attribute c: float;

  public  constructor: (A: float, B: float, C: float);
  // 3.1.2
  public  function evaluate: (x: float) => float;
};


function POLYNOMIAL::evaluate(x: float) => float
{
  return (0);
}
// 3.1.2
function QUADRATIC::constructor(A: float, B: float, C: float)
{

}

function LINEAR::evaluate(x: float) => float
{
  localvar result: float;
  result = 0.0;
  result = a * x + b;
  // 3.1.5
  return (result);
}

// 3.1.2
function main() => void
{
  localvar f1: LINEAR(2, 3.5);
  localvar f2: QUADRATIC(-2.0, 1.0, 0.0);
  localvar counter: integer;

  while(counter <= 10)
  {
    // 3.1.5 and 3.1.7 and 3.1.8
    read(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter));
  };
}



