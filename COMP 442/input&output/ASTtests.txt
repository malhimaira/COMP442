class POLYNOMIAL {
  public function evaluate: (x: float) => float;
  public function evaluate: (q: integer) => float;
};

class LINEAR isa POLYNOMIAL {
  private attribute a: float;
  private attribute b: float;
  private attribute b: float;
};

class LINEAR isa POLYNOMIAL {
    public function tryMethod: (l: integer, v: id) => integer;
};
class QUADRATIC isa POLYNOMIAL {
    public function undefMethod: () => void;
    public function tryMethod: (l: integer, v: id) => integer;
    public attribute x: float[5];
    public attribute y: integer[2];
    public attribute z: id[7];

};

class QUAD isa QUADRATIC {
  public function tryMethod: (l: integer, v: id) => integer;
};

class RANDO {
  private function rando: () => void;
};

/* print the array */
function undeclMethod(arr: integer[], size: integer) => void
{
  localvar n: float;
  localvar n: integer;
  localvar i: integer;
  n = size;
  i = 0;
  cookie();
  while (j+2 <= n-i*1/3+i) {
    write(arr[i]);
    write(i+j);
    read(j);
    i = i+1;
  };
  if (arr[j] > arr[j+1])
          then {
            // 3.1.9
            temp = arr[j][i];
            arr[j] = arr[j+1];
            arr[j+1] = temp;
          } else ;
          j = j+1;
}

function tryMethod(l: integer, v: id) => integer
{
  localvar undecCls: BLOCK;
  localvar blckarr: BLOCK[8];
  localvar ax: float[7];
  localvar ab: integer[6];
  localvar ac: integer[2];
}

function tryMethod(s: id) => integer
{
  localvar barr1: integer[7];
  localvar barr2: integer[6];
  localvar barr3: integer[2];
  barr3 = 6;
  return(barr3);
}

function tryMethod(s: id) => integer
{}

function main() => void
{
  localvar barr1: integer[7];
}

