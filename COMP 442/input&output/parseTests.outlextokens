[functionKeyWord, function, 1] [id, printArray, 1] [openBracketRound, (, 1] [closeBracketRound, ), 1] [lambdaExpression, =>, 1] [voidKeyWord, void, 1]
[openBracketCurly, {, 2]
[localvarKeyWord, localvar, 3] [id, n, 3] [colon, :, 3] [integerKeyWord, integer, 3] [semicolon, ;, 3]
[localvarKeyWord, localvar, 4] [id, i, 4] [colon, :, 4] [integerKeyWord, integer, 4] [semicolon, ;, 4]
[id, n, 5] [equals, =, 5] [id, size, 5] [semicolon, ;, 5]
[id, i, 6] [equals, =, 6] [integerType, 0, 6] [semicolon, ;, 6]
[whileKeyWord, while, 7] [openBracketRound, (, 7] [id, i, 7] [lessThan, <, 7] [id, n, 7] [closeBracketRound, ), 7] [openBracketCurly, {, 7]
[writeKeyWord, write, 8] [openBracketRound, (, 8] [id, arr, 8] [openBracketSquare, [, 8] [id, i, 8] [closeBracketSquare, ], 8] [closeBracketRound, ), 8] [semicolon, ;, 8]
[id, i, 9] [equals, =, 9] [id, i, 9] [plus, +, 9] [integerType, 1, 9] [semicolon, ;, 9]
[closedBracketCurly, }, 10] [semicolon, ;, 10]
[closedBracketCurly, }, 11]
[functionKeyWord, function, 13] [id, bubbleSort, 13] [openBracketRound, (, 13] [id, arr, 13] [colon, :, 13] [integerKeyWord, integer, 13] [openBracketSquare, [, 13] [closeBracketSquare, ], 13] [comma, ,, 13] [id, size, 13] [colon, :, 13] [integerKeyWord, integer, 13] [closeBracketRound, ), 13] [lambdaExpression, =>, 13] [voidKeyWord, void, 13]
[openBracketCurly, {, 14]
[localvarKeyWord, localvar, 15] [id, n, 15] [colon, :, 15] [integerKeyWord, integer, 15] [semicolon, ;, 15]
[localvarKeyWord, localvar, 16] [id, i, 16] [colon, :, 16] [integerKeyWord, integer, 16] [semicolon, ;, 16]
[localvarKeyWord, localvar, 17] [id, j, 17] [colon, :, 17] [integerKeyWord, integer, 17] [semicolon, ;, 17]
[localvarKeyWord, localvar, 18] [id, temp, 18] [colon, :, 18] [integerKeyWord, integer, 18] [semicolon, ;, 18]
[id, n, 19] [equals, =, 19] [id, size, 19] [semicolon, ;, 19]
[id, i, 20] [equals, =, 20] [integerType, 0, 20] [semicolon, ;, 20]
[id, j, 21] [equals, =, 21] [integerType, 0, 21] [semicolon, ;, 21]
[id, temp, 22] [equals, =, 22] [integerType, 0, 22] [semicolon, ;, 22]
[whileKeyWord, while, 23] [openBracketRound, (, 23] [id, i, 23] [lessThan, <, 23] [id, n, 23] [minus, -, 23] [integerType, 1, 23] [closeBracketRound, ), 23] [openBracketCurly, {, 23]
[whileKeyWord, while, 24] [openBracketRound, (, 24] [id, j, 24] [lessThan, <, 24] [id, n, 24] [minus, -, 24] [id, i, 24] [minus, -, 24] [integerType, 1, 24] [closeBracketRound, ), 24] [openBracketCurly, {, 24]
[ifKeyWord, if, 25] [openBracketRound, (, 25] [id, arr, 25] [openBracketSquare, [, 25] [id, j, 25] [closeBracketSquare, ], 25] [greaterThan, >, 25] [id, arr, 25] [openBracketSquare, [, 25] [id, j, 25] [plus, +, 25] [integerType, 1, 25] [closeBracketSquare, ], 25] [closeBracketRound, ), 25]
[thenKeyWord, then, 26] [openBracketCurly, {, 26]
[inlineComment, // swap temp and arr[i], 27]
[id, temp, 28] [equals, =, 28] [id, arr, 28] [openBracketSquare, [, 28] [id, j, 28] [closeBracketSquare, ], 28] [semicolon, ;, 28]
[id, arr, 29] [openBracketSquare, [, 29] [id, j, 29] [closeBracketSquare, ], 29] [equals, =, 29] [id, arr, 29] [openBracketSquare, [, 29] [id, j, 29] [plus, +, 29] [integerType, 1, 29] [closeBracketSquare, ], 29] [semicolon, ;, 29]
[id, arr, 30] [openBracketSquare, [, 30] [id, j, 30] [plus, +, 30] [integerType, 1, 30] [closeBracketSquare, ], 30] [equals, =, 30] [id, temp, 30] [semicolon, ;, 30]
[closedBracketCurly, }, 31] [elseKeyWord, else, 31] [semicolon, ;, 31]
[id, j, 32] [equals, =, 32] [id, j, 32] [plus, +, 32] [integerType, 1, 32] [semicolon, ;, 32]
[closedBracketCurly, }, 33] [semicolon, ;, 33]
[id, i, 34] [equals, =, 34] [id, i, 34] [plus, +, 34] [integerType, 1, 34] [semicolon, ;, 34]
[closedBracketCurly, }, 35] [semicolon, ;, 35]
[closedBracketCurly, }, 36]
[inlineComment, // ====== struct declarations ====== //, 37]
[classKeyWord, class, 38] [id, POLYNOMIAL, 38] [openBracketCurly, {, 38]
[publicKeyWord, public, 39] [functionKeyWord, function, 39] [id, evaluate, 39] [colon, :, 39] [openBracketRound, (, 39] [id, x, 39] [colon, :, 39] [floatKeyWord, float, 39] [closeBracketRound, ), 39] [lambdaExpression, =>, 39] [floatKeyWord, float, 39] [semicolon, ;, 39]
[closedBracketCurly, }, 40] [semicolon, ;, 40]
[classKeyWord, class, 42] [id, LINEAR, 42] [isaKeyWord, isa, 42] [id, POLYNOMIAL, 42] [openBracketCurly, {, 42]
[privateKeyWord, private, 43] [attributeKeyWord, attribute, 43] [id, a, 43] [colon, :, 43] [floatKeyWord, float, 43] [semicolon, ;, 43]
[privateKeyWord, private, 44] [attributeKeyWord, attribute, 44] [id, b, 44] [colon, :, 44] [floatKeyWord, float, 44] [semicolon, ;, 44]
[publicKeyWord, public, 45] [constructorKeyWord, constructor, 45] [colon, :, 45] [openBracketRound, (, 45] [id, A, 45] [colon, :, 45] [floatKeyWord, float, 45] [comma, ,, 45] [id, B, 45] [colon, :, 45] [floatKeyWord, float, 45] [closeBracketRound, ), 45] [semicolon, ;, 45]
[publicKeyWord, public, 46] [functionKeyWord, function, 46] [id, evaluate, 46] [colon, :, 46] [openBracketRound, (, 46] [id, x, 46] [colon, :, 46] [floatKeyWord, float, 46] [closeBracketRound, ), 46] [lambdaExpression, =>, 46] [floatKeyWord, float, 46] [semicolon, ;, 46]
[closedBracketCurly, }, 47] [semicolon, ;, 47]
[classKeyWord, class, 49] [id, QUADRATIC, 49] [isaKeyWord, isa, 49] [id, POLYNOMIAL, 49] [openBracketCurly, {, 49]
[privateKeyWord, private, 50] [attributeKeyWord, attribute, 50] [id, a, 50] [colon, :, 50] [floatKeyWord, float, 50] [semicolon, ;, 50]
[privateKeyWord, private, 51] [attributeKeyWord, attribute, 51] [id, b, 51] [colon, :, 51] [floatKeyWord, float, 51] [semicolon, ;, 51]
[privateKeyWord, private, 52] [attributeKeyWord, attribute, 52] [id, c, 52] [colon, :, 52] [floatKeyWord, float, 52] [semicolon, ;, 52]
[publicKeyWord, public, 53] [constructorKeyWord, constructor, 53] [colon, :, 53] [openBracketRound, (, 53] [id, A, 53] [colon, :, 53] [floatKeyWord, float, 53] [comma, ,, 53] [id, B, 53] [colon, :, 53] [floatKeyWord, float, 53] [comma, ,, 53] [id, C, 53] [colon, :, 53] [floatKeyWord, float, 53] [closeBracketRound, ), 53] [semicolon, ;, 53]
[publicKeyWord, public, 54] [functionKeyWord, function, 54] [id, evaluate, 54] [colon, :, 54] [openBracketRound, (, 54] [id, x, 54] [colon, :, 54] [floatKeyWord, float, 54] [closeBracketRound, ), 54] [lambdaExpression, =>, 54] [floatKeyWord, float, 54] [semicolon, ;, 54]
[closedBracketCurly, }, 55] [semicolon, ;, 55]
[inlineComment, // ====== member function implementations ====== //, 57]
[functionKeyWord, function, 58] [id, POLYNOMIAL, 58] [doubleColon, ::, 58] [id, evaluate, 58] [openBracketRound, (, 58] [id, x, 58] [colon, :, 58] [floatKeyWord, float, 58] [closeBracketRound, ), 58] [lambdaExpression, =>, 58] [floatKeyWord, float, 58]
[openBracketCurly, {, 59]
[returnKeyWord, return, 60] [openBracketRound, (, 60] [integerType, 0, 60] [closeBracketRound, ), 60] [semicolon, ;, 60]
[closedBracketCurly, }, 61]
[functionKeyWord, function, 63] [id, QUADRATIC, 63] [doubleColon, ::, 63] [id, evaluate, 63] [openBracketRound, (, 63] [id, x, 63] [colon, :, 63] [floatKeyWord, float, 63] [closeBracketRound, ), 63] [lambdaExpression, =>, 63] [floatKeyWord, float, 63]
[openBracketCurly, {, 64]
[localvarKeyWord, localvar, 65] [id, result, 65] [colon, :, 65] [floatKeyWord, float, 65] [semicolon, ;, 65]
[inlineComment, //Using Horner's method, 66]
[id, result, 67] [equals, =, 67] [id, a, 67] [semicolon, ;, 67]
[id, result, 68] [equals, =, 68] [id, result, 68] [multiply, *, 68] [id, x, 68] [plus, +, 68] [id, b, 68] [semicolon, ;, 68]
[id, result, 69] [equals, =, 69] [id, result, 69] [multiply, *, 69] [id, x, 69] [plus, +, 69] [id, c, 69] [semicolon, ;, 69]
[returnKeyWord, return, 70] [openBracketRound, (, 70] [id, result, 70] [closeBracketRound, ), 70] [semicolon, ;, 70]
[closedBracketCurly, }, 71]
[functionKeyWord, function, 73] [id, QUADRATIC, 73] [doubleColon, ::, 73] [constructorKeyWord, constructor, 73] [openBracketRound, (, 73] [id, A, 73] [colon, :, 73] [floatKeyWord, float, 73] [comma, ,, 73] [id, B, 73] [colon, :, 73] [floatKeyWord, float, 73] [comma, ,, 73] [id, C, 73] [colon, :, 73] [floatKeyWord, float, 73] [closeBracketRound, ), 73]
[openBracketCurly, {, 74]
[closedBracketCurly, }, 76]
[functionKeyWord, function, 78] [id, LINEAR, 78] [doubleColon, ::, 78] [constructorKeyWord, constructor, 78] [openBracketRound, (, 78] [id, A, 78] [colon, :, 78] [floatKeyWord, float, 78] [comma, ,, 78] [id, B, 78] [colon, :, 78] [floatKeyWord, float, 78] [closeBracketRound, ), 78]
[openBracketCurly, {, 79]
[closedBracketCurly, }, 81]
[functionKeyWord, function, 83] [id, LINEAR, 83] [doubleColon, ::, 83] [id, evaluate, 83] [openBracketRound, (, 83] [id, x, 83] [colon, :, 83] [floatKeyWord, float, 83] [closeBracketRound, ), 83] [lambdaExpression, =>, 83] [floatKeyWord, float, 83]
[openBracketCurly, {, 84]
[localvarKeyWord, localvar, 85] [id, result, 85] [colon, :, 85] [floatKeyWord, float, 85] [semicolon, ;, 85]
[id, result, 86] [equals, =, 86] [floatType, 0.0, 86] [semicolon, ;, 86]
[id, result, 87] [equals, =, 87] [id, a, 87] [multiply, *, 87] [id, x, 87] [plus, +, 87] [id, b, 87] [semicolon, ;, 87]
[returnKeyWord, return, 88] [openBracketRound, (, 88] [id, result, 88] [closeBracketRound, ), 88] [semicolon, ;, 88]
[closedBracketCurly, }, 89]
[inlineComment, // ====== main ====== //, 91]
[functionKeyWord, function, 92] [id, main, 92] [openBracketRound, (, 92] [closeBracketRound, ), 92] [lambdaExpression, =>, 92] [voidKeyWord, void, 92]
[openBracketCurly, {, 93]
[localvarKeyWord, localvar, 94] [id, f1, 94] [colon, :, 94] [id, LINEAR, 94] [openBracketRound, (, 94] [integerType, 2, 94] [comma, ,, 94] [floatType, 3.5, 94] [closeBracketRound, ), 94] [semicolon, ;, 94]
[localvarKeyWord, localvar, 95] [id, f2, 95] [colon, :, 95] [id, QUADRATIC, 95] [openBracketRound, (, 95] [minus, -, 95] [floatType, 2.0, 95] [comma, ,, 95] [floatType, 1.0, 95] [comma, ,, 95] [floatType, 0.0, 95] [closeBracketRound, ), 95] [semicolon, ;, 95]
[localvarKeyWord, localvar, 96] [id, counter, 96] [colon, :, 96] [integerKeyWord, integer, 96] [semicolon, ;, 96]
[whileKeyWord, while, 98] [openBracketRound, (, 98] [id, counter, 98] [lessThanOrEqualTo, <=, 98] [integerType, 10, 98] [closeBracketRound, ), 98]
[openBracketCurly, {, 99]
[writeKeyWord, write, 100] [openBracketRound, (, 100] [id, counter, 100] [closeBracketRound, ), 100] [semicolon, ;, 100]
[writeKeyWord, write, 101] [openBracketRound, (, 101] [id, f1, 101] [period, ., 101] [id, evaluate, 101] [openBracketRound, (, 101] [id, counter, 101] [closeBracketRound, ), 101] [closeBracketRound, ), 101] [semicolon, ;, 101]
[writeKeyWord, write, 102] [openBracketRound, (, 102] [id, f2, 102] [period, ., 102] [id, evaluate, 102] [openBracketRound, (, 102] [id, counter, 102] [closeBracketRound, ), 102] [closeBracketRound, ), 102] [semicolon, ;, 102]
[closedBracketCurly, }, 103] [semicolon, ;, 103]
[closedBracketCurly, }, 104]
[blockComment, /*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array\n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array\n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/, 105]
[functionKeyWord, function, 236] [id, testingtCool, 236] [openBracketRound, (, 236] [closeBracketRound, ), 236] [lambdaExpression, =>, 236] [voidKeyWord, void, 236]
[openBracketCurly, {, 237]
[localvarKeyWord, localvar, 239] [id, cool, 239] [colon, :, 239] [integerKeyWord, integer, 239] [semicolon, ;, 239]
[localvarKeyWord, localvar, 240] [id, jonathan, 240] [colon, :, 240] [integerKeyWord, integer, 240] [semicolon, ;, 240]
[localvarKeyWord, localvar, 241] [id, comp, 241] [colon, :, 241] [integerKeyWord, integer, 241] [semicolon, ;, 241]
[id, cool, 243] [equals, =, 243] [id, cool, 243] [minus, -, 243] [integerType, 1, 243] [semicolon, ;, 243]
[id, cool, 244] [equals, =, 244] [id, cool, 244] [plus, +, 244] [integerType, 1, 244] [semicolon, ;, 244]
[id, cool, 245] [equals, =, 245] [id, cool, 245] [greaterThan, >, 245] [integerType, 99, 245] [semicolon, ;, 245]
[id, cool, 246] [equals, =, 246] [id, cool, 246] [lessThan, <, 246] [integerType, 99, 246] [semicolon, ;, 246]
[closedBracketCurly, }, 248]
[functionKeyWord, function, 249] [id, testingtCool, 249] [openBracketRound, (, 249] [closeBracketRound, ), 249] [lambdaExpression, =>, 249] [voidKeyWord, void, 249]
[openBracketCurly, {, 250]
[localvarKeyWord, localvar, 252] [id, cool, 252] [colon, :, 252] [integerKeyWord, integer, 252] [semicolon, ;, 252]
[localvarKeyWord, localvar, 253] [id, mai, 253] [colon, :, 253] [integerKeyWord, integer, 253] [semicolon, ;, 253]
[localvarKeyWord, localvar, 254] [id, comp, 254] [colon, :, 254] [integerKeyWord, integer, 254] [semicolon, ;, 254]
[id, cool, 256] [equals, =, 256] [id, cool, 256] [minus, -, 256] [integerType, 1, 256] [semicolon, ;, 256]
[id, cool, 257] [equals, =, 257] [id, cool, 257] [plus, +, 257] [integerType, 1, 257] [semicolon, ;, 257]
[id, cool, 258] [equals, =, 258] [id, cool, 258] [greaterThan, >, 258] [integerType, 99, 258] [semicolon, ;, 258]
[id, cool, 259] [equals, =, 259] [id, cool, 259] [lessThan, <, 259] [integerType, 99, 259] [semicolon, ;, 259]
[id, cool, 260] [equals, =, 260] [id, comp, 260] [plus, +, 260] [id, mai, 260] [semicolon, ;, 260]
[id, mai, 261] [equals, =, 261] [id, comp, 261] [plus, +, 261] [id, cool, 261] [multiply, *, 261] [integerType, 5, 261] [semicolon, ;, 261]
[closedBracketCurly, }, 263] [EOF, EOF, 263]